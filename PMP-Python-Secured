from flask import Flask, render_template, Response, request, abort
from functools import wraps
import hmac
import hashlib
import time
import json
import secrets
from typing import Optional
import re
from urllib.parse import urlparse
import logging
from logging.handlers import RotatingFileHandler

class SecureCopyProtection:
    """
    Shea's Tech School Â© 2025 by Shea Bennett
    Licensed under Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International
    CC BY-NC-SA 4.0
    
    DO NOT STEAL. JUST PAY FOR YOUR OWN ACCESS.
    """
    
    def __init__(self, app=None, secret_key: Optional[str] = None):
        self.app = app
        self.secret_key = secret_key or secrets.token_hex(32)
        self.token_validity = 3600  # 1 hour
        self.setup_logging()
        
        if app is not None:
            self.init_app(app)
    
    def setup_logging(self):
        """Configure secure logging"""
        self.logger = logging.getLogger('SecureCopyProtection')
        self.logger.setLevel(logging.INFO)
        
        handler = RotatingFileHandler(
            'security.log',
            maxBytes=10000000,  # 10MB
            backupCount=5
        )
        formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        handler.setFormatter(formatter)
        self.logger.addHandler(handler)
    
    def init_app(self, app):
        """Initialize the secure copy protection system"""
        self.app = app
        self._setup_security_headers()
        self._setup_routes()
        self._setup_error_handlers()
        
    def _generate_token(self, content_id: str) -> str:
        """Generate a secure token for content verification"""
        timestamp = str(int(time.time()))
        message = f"{content_id}:{timestamp}".encode('utf-8')
        signature = hmac.new(
            self.secret_key.encode('utf-8'),
            message,
            hashlib.sha256
        ).hexdigest()
        return f"{timestamp}:{signature}"
    
    def _verify_token(self, token: str, content_id: str) -> bool:
        """Verify the security token"""
        try:
            timestamp, signature = token.split(':')
            timestamp = int(timestamp)
            
            # Check token expiration
            if time.time() - timestamp > self.token_validity:
                return False
            
            # Verify signature
            expected_signature = hmac.new(
                self.secret_key.encode('utf-8'),
                f"{content_id}:{timestamp}".encode('utf-8'),
                hashlib.sha256
            ).hexdigest()
            
            return hmac.compare_digest(signature, expected_signature)
        except Exception as e:
            self.logger.error(f"Token verification failed: {str(e)}")
            return False
    
    def _setup_security_headers(self):
        """Setup enhanced security headers"""
        @self.app.after_request
        def add_security_headers(response):
            # Strong security headers
            headers = {
                'Cache-Control': 'no-store, no-cache, must-revalidate, max-age=0',
                'Pragma': 'no-cache',
                'Expires': '0',
                'Content-Security-Policy': "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self'; connect-src 'self';",
                'X-Frame-Options': 'DENY',
                'X-XSS-Protection': '1; mode=block',
                'X-Content-Type-Options': 'nosniff',
                'Referrer-Policy': 'strict-origin-when-cross-origin',
                'Permissions-Policy': 'camera=(), microphone=(), geolocation=()',
                'Cross-Origin-Embedder-Policy': 'require-corp',
                'Cross-Origin-Opener-Policy': 'same-origin',
                'Cross-Origin-Resource-Policy': 'same-origin'
            }
            
            for header, value in headers.items():
                response.headers[header] = value
            
            return response
            
    def _setup_routes(self):
        """Setup secure routes"""
        @self.app.before_request
        def validate_request():
            # Validate request method
            if request.method not in ['GET', 'POST', 'HEAD']:
                abort(405)
            
            # Validate content type for POST requests
            if request.method == 'POST':
                if not request.content_type or \
                   not request.content_type.startswith('application/json'):
                    abort(415)
            
            # Validate request headers
            if 'X-Requested-With' not in request.headers or \
               request.headers['X-Requested-With'] != 'XMLHttpRequest':
                self.logger.warning(f"Invalid request headers from {request.remote_addr}")
                abort(403)
    
    def _setup_error_handlers(self):
        """Setup custom error handlers"""
        @self.app.errorhandler(403)
        def forbidden_error(error):
            self.logger.warning(f"403 error triggered from {request.remote_addr}")
            return render_template('error.html', error=403), 403
    
    def protect_content(self, f):
        """Enhanced decorator to protect specific routes"""
        @wraps(f)
        def decorated_function(*args, **kwargs):
            try:
                # Verify request origin
                if request.referrer:
                    parsed_uri = urlparse(request.referrer)
                    if parsed_uri.netloc != request.host:
                        self.logger.warning(f"Invalid referrer: {request.referrer}")
                        abort(403)
                
                # Generate content token
                content_id = request.endpoint
                token = self._generate_token(content_id)
                
                response = f(*args, **kwargs)
                
                if isinstance(response, str):
                    response = self._inject_protection_scripts(response, token)
                
                return response
                
            except Exception as e:
                self.logger.error(f"Error in protected route: {str(e)}")
                abort(500)
                
        return decorated_function
    
    def _inject_protection_scripts(self, content: str, token: str) -> str:
        """Inject enhanced protection JavaScript"""
        protection_js = f"""
        <script>
            (function() {{
                const token = '{token}';
                const protectionKey = '{secrets.token_hex(16)}';
                
                // Mutation Observer to prevent DOM modifications
                const observer = new MutationObserver((mutations) => {{
                    mutations.forEach((mutation) => {{
                        if (mutation.type === 'childList' || 
                            mutation.type === 'attributes') {{
                            mutation.target.removeAttribute('style');
                            mutation.target.removeAttribute('class');
                        }}
                    }});
                }});
                
                observer.observe(document.documentElement, {{
                    childList: true,
                    subtree: true,
                    attributes: true
                }});
                
                // Enhanced event protection
                const protectedEvents = [
                    'contextmenu', 'mousedown', 'auxclick', 'selectstart',
                    'dragstart', 'copy', 'cut', 'paste', 'keydown'
                ];
                
                protectedEvents.forEach(event => {{
                    document.addEventListener(event, (e) => {{
                        if (event === 'keydown') {{
                            const blocked = (e.ctrlKey || e.metaKey) && 
                                          ['c','v','x','a','p','s'].includes(e.key.toLowerCase()) ||
                                          ['F12','F11','F10'].includes(e.key);
                            if (blocked) {{
                                e.preventDefault();
                                e.stopPropagation();
                            }}
                        }} else {{
                            e.preventDefault();
                            e.stopPropagation();
                        }}
                    }}, {{ capture: true }});
                }});
                
                // Prevent DevTools
                setInterval(() => {{
                    const devtools = /./;
                    devtools.toString = () => {{
                        if (!document.hidden) {{
                            window.location.reload();
                        }}
                    }};
                }}, 100);
                
                // Prevent debugging
                (() => {{
                    function block() {{
                        debugger;
                        block();
                    }}
                    try {{ block(); }} catch (e) {{ }}
                }})();
                
                // Apply strict CSS protection
                const style = document.createElement('style');
                style.textContent = `
                    * {{
                        -webkit-user-select: none !important;
                        -moz-user-select: none !important;
                        -ms-user-select: none !important;
                        user-select: none !important;
                        -webkit-touch-callout: none !important;
                        touch-action: none !important;
                        pointer-events: none !important;
                    }}
                    
                    body, html {{
                        pointer-events: auto !important;
                    }}
                `;
                document.head.appendChild(style);
                
                // Viewport protection
                const meta = document.createElement('meta');
                meta.name = 'viewport';
                meta.content = 'width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0';
                document.head.appendChild(meta);
                
                // Disable console in production
                if (location.hostname !== 'localhost' && 
                    location.hostname !== '127.0.0.1') {{
                    console.log = console.debug = console.info = 
                    console.warn = console.error = () => {{}};
                }}
            }})();
        </script>
        """
        
        # Sanitize content before injection
        content = re.sub(r'<script.*?</script>', '', content, flags=re.DOTALL)
        
        return content.replace('</head>', f'{protection_js}</head>')

# Example usage with enhanced security
app = Flask(__name__)
app.config['SECRET_KEY'] = secrets.token_hex(32)
secure_protection = SecureCopyProtection(
    app, 
    secret_key=app.config['SECRET_KEY']
)

@app.route('/')
@secure_protection.protect_content
def index():
    return render_template('index.html')

if __name__ == '__main__':
    app.run(ssl_context='adhoc', debug=False)  # Force HTTPS in production
